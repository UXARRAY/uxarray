name: CI
on:
  pull_request:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'  # Daily at 00:00 UTC

jobs:
  test:
    name: Python (${{ matrix.python-version }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -l {0}

    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "macos-latest", "macos-14", "windows-latest"]
        python-version: ["3.10", "3.11", "3.12", "3.13"]

    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.12.1
        with:
          access_token: ${{ github.token }}

      - name: Checkout
        uses: actions/checkout@v5
        with:
          token: ${{ github.token }}

      # -- Miniforge/conda setup --
      - name: conda_setup (x64)
        if: matrix.os != 'macos-14'
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniforge-variant: Miniforge3
          miniforge-version: latest
          channels: conda-forge
          channel-priority: strict
          use-mamba: true
          cache-downloads: true

      - name: conda_setup (ARM64)
        if: matrix.os == 'macos-14'
        uses: conda-incubator/setup-miniconda@v3
        with:
          channels: conda-forge
          channel-priority: strict
          use-mamba: true
          cache-downloads: true
          installer-url: https://github.com/conda-forge/miniforge/releases/download/23.11.0-0/Miniforge3-23.11.0-0-MacOSX-arm64.sh

      # -- Compute paths & (non-Windows) env cache --
      - name: Compute conda paths
        id: conda_paths
        run: |
          echo "CONDA_BASE=$(conda info --base)" >> $GITHUB_ENV
          echo "CONDA_ENV_DIR=$(conda info --base)/envs/uxarray_build" >> $GITHUB_ENV

      - name: Cache conda env (non-Windows)
        if: runner.os != 'Windows'
        id: conda-env-cache
        uses: actions/cache@v4
        with:
          path: ${{ env.CONDA_ENV_DIR }}
          key: conda-env-${{ runner.os }}-py${{ matrix.python-version }}-${{ hashFiles('ci/environment.yml') }}

      # -- Ensure env exists (robust even if cache says hit) --
      - name: Ensure environment exists
        run: |
          if ! conda env list | awk '{print $1}' | grep -qx "uxarray_build"; then
            mamba create -y -n uxarray_build python=${{ matrix.python-version }}
            mamba env update -n uxarray_build -f ci/environment.yml
          fi
          conda env list

      - name: Show conda info
        run: |
          conda info
          conda run -n uxarray_build python -c "import sys; print('Python in env:', sys.version)"

      # -- Only reinstall UXarray each run --
      - name: Install uxarray (no deps)
        run: |
          conda run -n uxarray_build python -m pip install . --no-deps

      # -- Tests (always) --
      - name: Run Namespace Tests (timed + durations)
        run: |
          conda run -n uxarray_build python - <<'PY'
          import subprocess, sys, time
          cmd = [sys.executable, "-m", "pytest", "test", "-q", "--durations=0"]
          t0 = time.time()
          p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True)
          with open("pytest_durations_ns.txt", "w", encoding="utf-8") as f:
            for line in p.stdout:
              print(line, end="")
              f.write(line)
          rc = p.wait()
          dt = time.time() - t0
          with open("total_time_ns.txt", "w", encoding="utf-8") as f:
            f.write(f"{dt:.3f} seconds")
          sys.exit(rc)
          PY

      # -- Coverage (nightly only) --
      - name: Run Coverage Tests (timed + durations)
        if: github.event_name == 'schedule'
        env:
          NUMBA_DISABLE_JIT: 1
        run: |
          conda run -n uxarray_build python - <<'PY'
          import subprocess, sys, time
          cmd = [sys.executable, "-m", "pytest", "test", "-v",
                 "--cov=./uxarray", "--cov-report=xml", "--durations=0"]
          t0 = time.time()
          p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True)
          with open("pytest_durations_cov.txt", "w", encoding="utf-8") as f:
            for line in p.stdout:
              print(line, end="")
              f.write(line)
          rc = p.wait()
          dt = time.time() - t0
          with open("total_time_cov.txt", "w", encoding="utf-8") as f:
            f.write(f"{dt:.3f} seconds")
          sys.exit(rc)
          PY

      - name: Add timing summary
        if: always()
        run: |
          echo "## Test Timing Summary" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "- **Namespace tests total**: \`$(cat total_time_ns.txt 2>/dev/null || echo N/A)\`" >> "$GITHUB_STEP_SUMMARY"
          echo "- **Coverage tests total**:  \`$(cat total_time_cov.txt 2>/dev/null || echo N/A)\`" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "<details><summary>Namespace: pytest --durations=0</summary>" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          sed 's/^/    /' pytest_durations_ns.txt >> "$GITHUB_STEP_SUMMARY" || true
